package main

import (
	"context"
	"fmt"
	"runtime"
	"sync"
	"time"
)

func main() {
	fmt.Println("=== –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –í–°–ï–• –°–ü–û–°–û–ë–û–í –û–°–¢–ê–ù–û–í–ö–ò –ì–û–†–£–¢–ò–ù ===\n")

	// 1. –í—ã—Ö–æ–¥ –ø–æ —É—Å–ª–æ–≤–∏—é
	fmt.Println("1. –í—ã—Ö–æ–¥ –ø–æ —É—Å–ª–æ–≤–∏—é:")
	stopFlag := false
	go func() {
		for !stopFlag {
			fmt.Print("‚è∞ ")
			time.Sleep(200 * time.Millisecond)
		}
		fmt.Println("\n–ì–æ—Ä—É—Ç–∏–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ —É—Å–ª–æ–≤–∏—é")
	}()
	time.Sleep(1 * time.Second)
	stopFlag = true
	time.Sleep(100 * time.Millisecond)

	// 2. –ß–µ—Ä–µ–∑ –∫–∞–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
	fmt.Println("\n2. –ß–µ—Ä–µ–∑ –∫–∞–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:")
	stopChan := make(chan struct{})
	go func() {
		for {
			select {
			case <-stopChan:
				fmt.Println("–ì–æ—Ä—É—Ç–∏–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ –∫–∞–Ω–∞–ª")
				return
			default:
				fmt.Print("üîî ")
				time.Sleep(200 * time.Millisecond)
			}
		}
	}()
	time.Sleep(1 * time.Second)
	close(stopChan)
	time.Sleep(100 * time.Millisecond)

	// 3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
	fmt.Println("\n3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:")

	// –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º
	ctxTimeout, cancelTimeout := context.WithTimeout(context.Background(), 1*time.Second)
	defer cancelTimeout()

	go func(ctx context.Context) {
		for {
			select {
			case <-ctx.Done():
				fmt.Println("–ì–æ—Ä—É—Ç–∏–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ —Ç–∞–π–º–∞—É—Ç—É –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
				return
			default:
				fmt.Print("‚è±Ô∏è ")
				time.Sleep(200 * time.Millisecond)
			}
		}
	}(ctxTimeout)
	time.Sleep(2 * time.Second)

	// –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å –æ—Ç–º–µ–Ω–æ–π
	ctxCancel, cancel := context.WithCancel(context.Background())
	go func(ctx context.Context) {
		for {
			select {
			case <-ctx.Done():
				fmt.Println("–ì–æ—Ä—É—Ç–∏–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ –æ—Ç–º–µ–Ω–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
				return
			default:
				fmt.Print("üéØ ")
				time.Sleep(200 * time.Millisecond)
			}
		}
	}(ctxCancel)
	time.Sleep(1 * time.Second)
	cancel()
	time.Sleep(100 * time.Millisecond)

	// 4. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ sync.WaitGroup
	fmt.Println("\n4. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ sync.WaitGroup:")
	var wg sync.WaitGroup
	stopChan2 := make(chan struct{})

	wg.Add(1)
	go func() {
		defer wg.Done()
		for {
			select {
			case <-stopChan2:
				fmt.Println("–ì–æ—Ä—É—Ç–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å WaitGroup")
				return
			default:
				fmt.Print("üë• ")
				time.Sleep(200 * time.Millisecond)
			}
		}
	}()
	time.Sleep(1 * time.Second)
	close(stopChan2)
	wg.Wait()

	// 5. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ runtime.Goexit()
	fmt.Println("\n5. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ runtime.Goexit():")
	go func() {
		defer fmt.Println("–ì–æ—Ä—É—Ç–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —á–µ—Ä–µ–∑ Goexit")

		ticker := time.NewTicker(200 * time.Millisecond)
		defer ticker.Stop()

		counter := 0
		for range ticker.C {
			fmt.Print("üö™ ")
			counter++

			if counter >= 5 {
				fmt.Println("\n–í—ã–∑—ã–≤–∞–µ–º runtime.Goexit()")
				runtime.Goexit()
			}
		}
	}()
	time.Sleep(2 * time.Second)

	// 6. –ü–∞–Ω–∏–∫–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
	fmt.Println("\n6. –ü–∞–Ω–∏–∫–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ:")
	go func() {
		defer func() {
			if r := recover(); r != nil {
				fmt.Printf("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø–æ—Å–ª–µ –ø–∞–Ω–∏–∫–∏: %v\n", r)
			}
		}()

		counter := 0
		for {
			fmt.Print("üí• ")
			time.Sleep(200 * time.Millisecond)
			counter++

			if counter >= 4 {
				panic("–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–∞—è –ø–∞–Ω–∏–∫–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
			}
		}
	}()
	time.Sleep(2 * time.Second)

	// 7. –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏
	fmt.Println("\n7. –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥:")
	jobs := make(chan int, 5)
	stopChan3 := make(chan struct{})
	done := make(chan struct{})

	go func() {
		defer close(done)
		for {
			select {
			case job := <-jobs:
				fmt.Printf("üì¶[%d] ", job)
				time.Sleep(300 * time.Millisecond)
			case <-stopChan3:
				fmt.Println("\n–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≥–æ—Ä—É—Ç–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
				return
			}
		}
	}()

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏—è
	for i := 1; i <= 3; i++ {
		jobs <- i
	}
	time.Sleep(1 * time.Second)
	close(stopChan3)
	<-done

	// 8. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞
	fmt.Println("\n8. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞:")
	go func() {
		timer := time.NewTimer(1 * time.Second)

		for {
			select {
			case <-timer.C:
				fmt.Println("\n–¢–∞–π–º–µ—Ä —Å—Ä–∞–±–æ—Ç–∞–ª - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–æ—Ä—É—Ç–∏–Ω—É")
				return
			default:
				fmt.Print("‚è≤Ô∏è ")
				time.Sleep(200 * time.Millisecond)
			}
		}
	}()
	time.Sleep(2 * time.Second)

	// 9. –ó–∞–∫—Ä—ã—Ç–∏–µ –∫–∞–Ω–∞–ª–∞ –¥–∞–Ω–Ω—ã—Ö
	fmt.Println("\n9. –ó–∞–∫—Ä—ã—Ç–∏–µ –∫–∞–Ω–∞–ª–∞ –¥–∞–Ω–Ω—ã—Ö:")
	dataChan := make(chan int)
	go func() {
		for data := range dataChan {
			fmt.Printf("üìä[%d] ", data)
			time.Sleep(200 * time.Millisecond)
		}
		fmt.Println("\n–ö–∞–Ω–∞–ª –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç - –≥–æ—Ä—É—Ç–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
	}()

	for i := 1; i <= 3; i++ {
		dataChan <- i
	}
	time.Sleep(500 * time.Millisecond)
	close(dataChan)
	time.Sleep(100 * time.Millisecond)

	fmt.Println("\n=== –í–°–ï –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò –ó–ê–í–ï–†–®–ï–ù–´ ===")

	// –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –≥–æ—Ä—É—Ç–∏–Ω
	time.Sleep(1 * time.Second)
}
